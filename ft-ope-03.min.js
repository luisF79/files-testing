addEventListener('DOMContentLoaded', () => {
  // flag to detect when file was converted from convertio
  let isConvertioFile = document.body.scrollHeight === 0

  // declare all document event types
  const eventTypes = {
    PRINT: 'print',
    SET_DATA: 'set-data',
    SET_TABLES_DATA: 'set-tables-data',
    REQUEST_TABLES_DATA: 'request-tables-data',
    EXTRACT_DATA: 'extract-data',
    DISABLE_DOC: 'disable-doc',
    ENABLE_DOC: 'enable-doc',
    ZOOM_IN: 'zoom-in',
    ZOOM_OUT: 'zoom-out',
    SET_DOC_HEADERS: 'set-doc-headers',
    SIGN: 'sign'
  }

  // if is convertio file, don't let document to do zoomOut
  let zoomIndex = isConvertioFile ? 0 : 9
  // Indexes
  const zoomValues = isConvertioFile
    // 0   1    2    3    4    5    6    7     8   9
    ? [1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]
    //  0    1     2   3    4    5    6    7    8   9   10   11  12    13   14   15   16   17   18
    : [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9]

  const zoomIn = () => {
    if (isConvertioFile && zoomIndex === 9) return
    if (!isConvertioFile && zoomIndex === 18) return
    zoomIndex += 1
    if (isConvertioFile) {
      const pageContainer = document.getElementById('page-container')
      pageContainer.style.transform = `scale(${zoomValues[zoomIndex]})`
      pageContainer.style.transformOrigin = '0 0'
      return
    }
    document.body.style.transform = `scale(${zoomValues[zoomIndex]})`
    document.body.style.transformOrigin = '0 0'
  }

  const zoomOut = () => {
    if (zoomIndex === 0) return
    zoomIndex -= 1
    if (isConvertioFile) {
      const pageContainer = document.getElementById('page-container')
      pageContainer.style.transform = `scale(${zoomValues[zoomIndex]})`
      pageContainer.style.transformOrigin = '0 0'
      return
    }
    document.body.style.transform = `scale(${zoomValues[zoomIndex]})`
    document.body.style.transformOrigin = '0 0'
  }

  // function to remove background and alt attribute in images that don't have src value
  const hideEmptyImages = () => {
    const images = document.querySelectorAll('img')
    images.forEach(img => {
      if (!img.src) {
        img.setAttribute('alt', '')
        img.style.background = 'transparent'
        img.style.visibility = 'hidden'
      }
    })
  }

  // function to show background and alt attribute in images that don't have src value
  // also to show area where user can click to add sign
  const showEmptyImages = () => {
    const images = document.querySelectorAll('img')
    images.forEach(img => {
      if (img.classList[0]?.includes('sign')) {
        img.setAttribute('alt', 'Click para firmar')
        if (!img.src) {
          img.style.visibility = 'visible'
          img.style.background = '#00000030'
        }
      }
    })
  }

  // disables document interactivity
  const disableDocInteractivity = () => {
    const disableScreens = document.querySelectorAll('.disable-screen')
    for (const disableScreen of disableScreens) {
      disableScreen.style.display = 'block'
      hideEmptyImages()
      return
    }

    let screen

    if (!isConvertioFile) {
      const pages = document.querySelectorAll('.page')
      for (const page of pages) {
        screen = document.createElement('div')
        screen.className = 'disable-screen'
        screen.style.width = '100%'
        screen.style.position = 'absolute'
        screen.style.top = '0'
        screen.style.left = '0'
        screen.style.height = `${page.clientHeight}px`
        page.appendChild(screen)
      }
    } else {
      const pageContainer = document.getElementById('page-container')
      screen = document.createElement('div')
      screen.style.height = `${pageContainer.scrollHeight}px`
      screen.className = 'disable-screen'
      screen.style.width = '100%'
      screen.style.position = 'absolute'
      screen.style.top = '0'
      screen.style.left = '0'
      pageContainer.appendChild(screen)
    }

    hideEmptyImages()
  }

  // enables document interactivity
  const enableDocInteractivity = () => {
    const screens = document.querySelectorAll('.disable-screen')
    for (const screen of screens) {
      screen.style.display = 'none'
    }
    showEmptyImages()
  }

  // signs
  const signs = document.querySelectorAll('img[class^=sign]')

  // remove src of signs to set data in a clear dom and add default styles
  for (const sign of signs) {
    sign.removeAttribute('src')
    sign.parentNode.style.display = 'flex'
    sign.parentNode.style.justifyContent = 'center'
    sign.style.cursor = 'pointer'
  }

  // function to add/remove signs
  const replaceSign = e => {
    const targetClass = e.target.classList[0]
    const targetSrc = e.target.src

    if (targetSrc) {
      if (confirm('Â¿Remover firma?')) {
        document.querySelectorAll(`.${targetClass}`).forEach(sign => {
          sign.removeAttribute('src')
          sign.style.background = '#00000030'
        })
      }
    } else {
      const message = {
        element: targetClass,
        sender: 'SoftOil',
        type: eventTypes.SIGN
      }
      window.parent.postMessage(message, window.origin)
    }
  }

  // function to sign doc, target refers to the element in which image will be placed (recommended to use class attr)
  // signImg is the url of the image
  const signDoc = ({ target, signImg }) => {
    const signs = document.getElementsByClassName(target)

    for (const sign of signs) {
      sign.setAttribute('src', signImg)
      sign.parentNode.style.display = 'flex'
      sign.parentNode.style.justifyContent = 'center'
      sign.style.background = 'transparent'
    }
  }

  const setDispatchersTableData = (rows) => {
    const tablePrefix = 'FT-OPE-03-table-dispatchers'

    for (const [index, dispatcher] of rows.entries()) {
      const brandCell = document.getElementById(`${tablePrefix}-r1c${index + 2}`).children[0]
      const modelCell = document.getElementById(`${tablePrefix}-r2c${index + 2}`).children[0]
      const serialNumberCell = document.getElementById(`${tablePrefix}-r3c${index + 2}`).children[0]
      const approvalNumberCell = document.getElementById(`${tablePrefix}-r4c${index + 2}`).children[0]

      brandCell.value = dispatcher.brand
      modelCell.value = dispatcher.model
      serialNumberCell.value = dispatcher.serialNumber
      approvalNumberCell.value = dispatcher.approvalNumber
    }
  }

  const setPriceChangesTableData = (priceChange) => {
    const tablePrefix = 'FT-OPE-03-table-price-changes'

    const dateCell = document.getElementById(`${tablePrefix}-r1c1`).children[0]
    const timeCell = document.getElementById(`${tablePrefix}-r1c2`).children[0]
    const regularPriceCell = document.getElementById(`${tablePrefix}-r1c3`).children[0]
    const premiumPriceCell = document.getElementById(`${tablePrefix}-r1c4`).children[0]
    const dieselPriceCell = document.getElementById(`${tablePrefix}-r1c5`).children[0]
    const creFolioCell = document.getElementById(`${tablePrefix}-r1c6`).children[0]
    const nameCell = document.getElementById(`${tablePrefix}-r1c7`).children[0]

    dateCell.value = priceChange.date
    timeCell.value = priceChange.time
    regularPriceCell.value = priceChange.regularPrice
    premiumPriceCell.value = priceChange.premiumPrice
    dieselPriceCell.value = priceChange.dieselPrice
    creFolioCell.value = priceChange.creFolio
    nameCell.value = priceChange.personWhoVerifies
  }

  const setPriceChangeLogTableData = (rows) => {
    const tablePrefix = 'FT-OPE-03-table-price-change-log'

    for (const [index, log] of rows.entries()) {
      const dispatcherCell = document.getElementById(`${tablePrefix}-r${index + 1}c1`).children[0]
      const sideCell = document.getElementById(`${tablePrefix}-r${index + 1}c2`).children[0]
      const meterSerialNumberCell = document.getElementById(`${tablePrefix}-r${index + 1}c3`).children[0]
      const productCell = document.getElementById(`${tablePrefix}-r${index + 1}c4`).children[0]
      const tagCell = document.getElementById(`${tablePrefix}-r${index + 1}c5`).children[0]
      const dateTimeCell = document.getElementById(`${tablePrefix}-r${index + 1}c6`).children[0]
      const creFolioCell = document.getElementById(`${tablePrefix}-r${index + 1}c7`).children[0]
      const eventFormatCell = document.getElementById(`${tablePrefix}-r${index + 1}c8`).children[0]

      dispatcherCell.value = log.dispatcherNumber
      sideCell.value = log.dispatcherSide
      meterSerialNumberCell.value = log.meterSerialNumber
      productCell.value = log.product
      tagCell.value = log.tag
      dateTimeCell.value = log.dateTime
      creFolioCell.value = log.creFolio
      eventFormatCell.value = log.eventFormat
    }
  }

  const setTablesData = (data) => {
    const dispatchersData = data?.dispatcherRows
    const priceChangesData = data?.priceChange
    const priceChangeLogsData = data?.priceChangeLogRows

    if (dispatchersData) setDispatchersTableData(dispatchersData)
    if (priceChangesData) setPriceChangesTableData(priceChangesData)
    if (priceChangeLogsData) setPriceChangeLogTableData(priceChangeLogsData)

  }

  const setData = (data) => {

    for (const key in data) {
      if (key.includes('img')) {
        if (data[key] === false) {
          document.getElementById(key).classList.add('disabled-icon')
        } else if (data[key] === true) {
          document.getElementById(key).classList.remove('disabled-icon')
        }
      } else if (key.includes('sign')) {
        const signs = document.querySelectorAll(`img[class=${key}]`)
        for (const sign of signs) {
          if (data[key]) {
            sign.setAttribute('src', data[key])
            sign.parentNode.style.display = 'flex'
            sign.parentNode.style.justifyContent = 'center'
            sign.style.background = 'transparent'
          }
        }
      } else {
        document.getElementById(key).value = data[key]
      }
    }
  }

  // function to extract data from document fields
  const extractData = () => {
    const inputs = document.querySelectorAll('input[type="text"]')
    const signs = document.querySelectorAll('img[class^=sign]')

    const data = {}

    for (const sign of signs) {
      data[sign.classList[0]] = sign.src
    }

    for (const input of inputs) {
      if (input.id) {
        data[input.id] = input.value
      }
    }

    return data
  }

  // add listener to all the images which class starts with "sign"
  document.querySelectorAll('img[class^=sign]').forEach(sign => {
    sign.onclick = replaceSign
  })

  // function to set the document headers info
  const setDocumentHeaders = docInfo => {
    const stationNameInputs = document.getElementsByClassName('station-name')
    const addressInputs = document.getElementsByClassName('station-address')
    const stationPermitInputs = document.getElementsByClassName('station-permit')
    const stationLogo = document.getElementsByClassName('station-logo')

    for (const input of stationNameInputs) {
      input.value = docInfo?.stationName
    }

    for (const input of addressInputs) {
      input.value = docInfo?.stationAddress
    }

    for (const input of stationPermitInputs) {
      input.value = docInfo?.stationPermit
    }

    for (const logo of stationLogo) {
      logo.setAttribute('src', docInfo?.stationLogo)
    }
  }

  // event listeners to watch when parent window (SGO app) posts a message to this scope
  // messages to this scope MUST have a property called "sender" with value "SoftOil"
  window.addEventListener('message', event => {
    if (event.data.sender !== 'SoftOil') return

    if (event.data.type === eventTypes.PRINT) {
      return window.print()
    }

    if (event.data.type === eventTypes.SET_DATA) {
      const fields = JSON.parse(event.data.fields)
      setData(fields)
      return
    }

    if (event.data.type === eventTypes.SET_TABLES_DATA) {
      const fields = JSON.parse(event.data.fields)
      setTablesData(fields)
      return
    }

    if (event.data.type === eventTypes.EXTRACT_DATA) {
      const obj = {
        fields: extractData(),
        sender: 'SoftOil',
        type: eventTypes.EXTRACT_DATA
      }
      window.parent.postMessage(obj, window.origin)
      return
    }

    if (event.data.type === eventTypes.DISABLE_DOC) {
      disableDocInteractivity()
      return
    }

    if (event.data.type === eventTypes.ENABLE_DOC) {
      enableDocInteractivity()
      return
    }

    if (event.data.type === eventTypes.ZOOM_IN) {
      zoomIn()
      return
    }

    if (event.data.type === eventTypes.ZOOM_OUT) {
      zoomOut()
      return
    }

    if (event.data.type === eventTypes.SET_DOC_HEADERS) {
      setDocumentHeaders(event.data.docHeaders)
      return
    }

    if (event.data.type === eventTypes.SIGN) {
      const target = event.data.element
      const signImg = event.data.signImg
      signDoc({ target, signImg })
      return
    }
  })

  const requestTablesData = () => {
    const obj = {
      sender: 'SoftOil',
      type: eventTypes.REQUEST_TABLES_DATA
    }
    window.parent.postMessage(obj, window.origin)
    return
  }

  requestTablesData()

})
